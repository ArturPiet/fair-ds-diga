package de.expandai.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FingerTapsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFingerTapsAllPropertiesEquals(FingerTaps expected, FingerTaps actual) {
        assertFingerTapsAutoGeneratedPropertiesEquals(expected, actual);
        assertFingerTapsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFingerTapsAllUpdatablePropertiesEquals(FingerTaps expected, FingerTaps actual) {
        assertFingerTapsUpdatableFieldsEquals(expected, actual);
        assertFingerTapsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFingerTapsAutoGeneratedPropertiesEquals(FingerTaps expected, FingerTaps actual) {
        assertThat(expected)
            .as("Verify FingerTaps auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFingerTapsUpdatableFieldsEquals(FingerTaps expected, FingerTaps actual) {
        assertThat(expected)
            .as("Verify FingerTaps relevant properties")
            .satisfies(e -> assertThat(e.getPatientId()).as("check patientId").isEqualTo(actual.getPatientId()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getSide()).as("check side").isEqualTo(actual.getSide()))
            .satisfies(e -> assertThat(e.getThumbX()).as("check thumbX").isEqualTo(actual.getThumbX()))
            .satisfies(e -> assertThat(e.getThumbY()).as("check thumbY").isEqualTo(actual.getThumbY()))
            .satisfies(e -> assertThat(e.getDigitX()).as("check digitX").isEqualTo(actual.getDigitX()))
            .satisfies(e -> assertThat(e.getDigitY()).as("check digitY").isEqualTo(actual.getDigitY()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFingerTapsUpdatableRelationshipsEquals(FingerTaps expected, FingerTaps actual) {
        assertThat(expected)
            .as("Verify FingerTaps relationships")
            .satisfies(e -> assertThat(e.getPatient()).as("check patient").isEqualTo(actual.getPatient()));
    }
}
